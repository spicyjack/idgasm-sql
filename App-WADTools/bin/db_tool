#!/usr/bin/perl -w

# For support with this file, please file an issue on the GitHub issue tracker
# for this project: https://github.com/spicyjack/wadtools/issues

=head1 NAME

B<db_tool> - Bootstrap a database that will contain information about
WAD files stored in C<idGames Archive>.

=cut

our $copyright =
    q|Copyright (c)2013-2014 Brian Manning|;

=head1 SYNOPSIS

 perl db_tool [OPTIONS]

 Script options:
 -h|--help          Shows this help text
 -c|--colorize      Always colorize script output
 -d|--debug         Debug script execution
 -v|--verbose       Verbose script execution
 --version          Print script version and copyright, then exit

 Script file options:
 -i|--input         The input file to read information from
 -o|--output        The output file to write information to
 -s|--checksum      Populate --input file with checksums to --output
 -x|--overwrite     Overwrite file specified as --output

 Script output options (what kind of files to create, choose only one):
 --create-db        Create a database file using the given INI file
 --create-ini       Create an INI file using schema info in database
 --create-yaml      Create a YAML file using schema info in database

 Example usage:

 # build a database file using the given INI file
 db_tool --input /path/to/db.ini \
    --output sample.db --create-db

 # update the checksums in an existing INI file
 db_tool --input /path/to/db.ini \
    --output /path/to/db.ini --checksum --overwrite

 # create a database, debug mode, with colorization
 db_tool --input /path/to/db.ini \
   --output idgames_file_map.db \
   --create-db --debug --colorize --overwrite

You can view the full C<POD> documentation of this file by calling
C<perldoc db_tool>.

=cut

our @options = (
    # script options
    q(debug|d),
    q(verbose|v),
    q(version),
    q(help|h),
    q(colorize|c), # always colorize output

    # other options
    q(input|i=s),
    q(output|o=s),
    q(overwrite|x),
    q(checksum|s),
    q(create-db),
    q(create-ini),
    q(create-yaml),
);

=head1 DESCRIPTION

Creates databases using config specified in INI file.

=head1 OBJECTS

=head2 App::WADTools::Config

An object used for storing configuration data.

=head3 Object Methods

=cut

################
# package main #
################
package main;

# pragmas
use 5.010;
# https://metacpan.org/pod/strictures
use strictures 1;
use utf8;

# system packages
use Carp;
use Config::Std;
use File::Basename;
use Log::Log4perl qw(get_logger :no_extra_logdie_message);
use Log::Log4perl::Level;
use Pod::Usage;

# Data::Dumper gets it's own block, cause it has extra baggage
use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Terse = 1;

# local packages
use App::WADTools; # for $VERSION
use App::WADTools::Config;
use App::WADTools::idGamesDB;
use App::WADTools::INIFile;
use App::WADTools::Logger;

    # create a variable with the current name of the script
    my $my_name = basename($0);
    # provide a version string if dzil hasn't populated modules with $VERSION
    # scalars
    my $VERSION = $App::WADTools::VERSION || q(git-dev);

    binmode(STDOUT, ":utf8");
    # create a logger object
    my $cfg = App::WADTools::Config->new(options => \@options);

    # dump and bail if we get called with --help
    if ( $cfg->defined(q(help)) ) { pod2usage(-exitstatus => 1); }

    if ( $cfg->defined(q(version)) ) {
        print STDERR qq($my_name: version '$VERSION'\n);
        print STDERR qq($my_name: $copyright\n);
        exit 0;
    }

    # create a logger object, and prime the logfile for this session
    my $log = App::WADTools::Logger->new(config => $cfg);

    # check input file before doing any processing
    $log->logdie(qq(Missing '--input' file argument))
        unless ( $cfg->defined(q(input)) );
    $log->logdie(qq(Can't read input file ) . $cfg->get(q(input)) )
        unless ( -r $cfg->get(q(input)) );

    # print a nice banner first
    $log->warn(qq(Starting $my_name, version '$VERSION'));
    $log->warn(qq($copyright));
    $log->warn(qq(My PID is $$));

    # check that we're not overwriting files if --output was used
    if ( $cfg->defined(q(output)) ) {
        if ( -e $cfg->get(q(output)) && ! $cfg->defined(q(overwrite)) ) {
            $log->error(qq(Output file exists!));
            $log->error(qq(Use '--overwrite' option to overwrite output file));
            $log->logdie(q(Output file: ) . $cfg->get(q(output)));
        } else {
            # delete the database file; it will be recreated when the database
            # handle is instantiated
            if ( $cfg->defined(q(create-db)) ) {
                $log->info(q(--output file exists, --overwrite requested;));
                $log->info(q(Unlinking old database file...));
                unlink( $cfg->get(q(output)) );
            }
        }
    }

    my $db_schema;
    my $ini_file = App::WADTools::INIFile->new(
        filename => $cfg->get(q(input)));
    if ( ref($ini_file) eq q(App::WADTools::Error) ) {
        $log->logdie(q(Error opening INI file ') . $cfg->get(q(input)) . q('));
    }
    if ( $cfg->defined(q(create-db)) ) {
        $log->warn(q(Creating database file...));
        if ( $cfg->get(q(input)) =~ /\.ini$/ ) {
            $db_schema = $ini_file->read_ini_config();
            #$ini_file->dump_schema(
            #    db_schema  => $db_schema,
            #    extra_text => q(Dump called from --create-db block),
            #);
            $log->debug(q(Parsing schema metadata;));
            $log->debug(q(  Epoch:    )
                . $db_schema->{q(default)}->{q(schema_epoch)});
            $log->debug(q(  Date:     )
                . $db_schema->{q(default)}->{q(schema_date)});
            $log->debug(q(  Notes:    )
                . $db_schema->{q(default)}->{q(schema_notes)});
            if ( exists $db_schema->{q(default)}->{q(base_url)} ) {
                $log->debug(q(  Base URL: )
                    . $db_schema->{q(default)}->{q(base_url)});
            }
            my $db = App::WADTools::idGamesDB->new(
                filename => $cfg->get(q(output))
            );
            if ( $db->connect ) {
                $log->warn(q(Checking for existing schema...));
                $log->warn(q|(Note: errors checking for schema are harmless)|);
                my $schema_entries = $db->has_schema;
                if ( $schema_entries == 0 ) {
                    $log->warn(q(DB schema empty, calling 'apply_schema'));
                    $db->apply_schema(schema => $db_schema);
                } else {
                    $log->warn(q(DB schema has already been populated;));
                    $log->warn(qq(Schema has $schema_entries entries));
                }
                $log->warn(q(DB schema creation complete!));
            } else {
                $log->logdie(q(Unable to connect to database));
            }
        } else {
            $log->logdie(q(Don't know how to process file )
                . $cfg->get(q(input)));
        }
    } elsif ( $cfg->defined(q(create-yaml)) ) {
    } elsif ( $cfg->defined(q(create-ini)) ) {
    } elsif ( $cfg->defined(q(checksum)) ) {
        $log->warn(q(Checksumming database schema INI file...));
        if ( $cfg->get(q(input)) =~ /\.ini$/ ) {
            # MD5 checksums, for now
            $db_schema = $ini_file->read_ini_config();
            $db_schema = $ini_file->md5_checksum(db_schema => $db_schema);
            $ini_file->dump_schema(
                db_schema  => $db_schema,
                extra_text => q(Dump called post-MD5 checksum),
            );
            my $filesize = $ini_file->write_ini_config(
                db_schema => $db_schema
            );
            if ( ref($filesize) eq q(App::WADTools::Error) ) {
                $log->error(q(Writing config file returned an error!));
                $log->logdie(q(Error message: ) . $filesize->error_msg);
            } else {
                $log->warn(q(Wrote file ) . $ini_file->filename);
                $log->warn(q(File size: ) . $filesize . q| byte(s)|);
            }
        } else {
            $log->logdie(q(Don't know how to process file )
                . $cfg->get(q(input)));
        }
    } else {
        $log->error(q(Please specify a script output option));
        $log->error(qq(Use "$my_name --help" to see script options));
    }

=cut

=back

=head1 AUTHOR

Brian Manning, C<< <brian at xaoc dot org> >>

=head1 BUGS

Please report any bugs or feature requests to the GitHub issue tracker for
this project:

C<< <https://github.com/spicyjack/public/issues> >>.

=head1 SUPPORT

You can find documentation for this script with the perldoc command.

    perldoc db_tool

=head1 COPYRIGHT & LICENSE

Copyright (c) 2013-2014 Brian Manning, all rights reserved.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

# fin!
# vim: set shiftwidth=4 tabstop=4
