#!/usr/bin/perl -w

# For support with this file, please file an issue on the GitHub issue tracker
# for this project: https://github.com/spicyjack/wadtools/issues

=head1 NAME

B<idgames_db_dump> - Build a mapping of filenames to file ID's from the
files stored in C<idGames Archive>.

=cut

our $copyright =
    q|Copyright (c)2013 Brian Manning/brian at xaoc dot org|;

=head1 SYNOPSIS

 perl idgames_db_dump [OPTIONS]

 Script options:
 -h|--help          Shows this help text
 -d|--debug         Debug script execution
 -c|--colorize      Always colorize script output
 -v|--verbose       Verbose script execution
 --version          Print script version and copyright, then exit

 Other script options:
 -b|--database      Write info retrieved via API to this SQLite file
 -x|--xml           Request XML data from idGames API (default)
 -j|--json          Request JSON data from idGames API
 --save-textfile    Saves contents of '*.txt' files to database
 -m|--morehelp      Show misc/debugging options, then exit

 Example usage:

 # dump the idGames Archive API to a database file;
 # idgames_archive.db would have been created using 'db_bootstrap'
 idgames_db_dump --database /path/to/local/idgames_archive.db

 # debug with colorized debug messages
 idgames_db_dump --database /path/to/idgames_db_dump.db \
    --debug --colorize

You can view the full C<POD> documentation of this file by calling C<perldoc
idgames_db_dump>.

=cut

our $morehelp = <<MOREHELP;

 === Misc/debugging script options ===
 --no-random-wait   Don't use random pauses between GET requests
 --random-wait-time Seed for random wait timer; default = 5, 0-5 seconds
 --debug-noexit     Don't exit script when --debug is used
 --debug-requests   Exit after this many requests when --debug is used
 --no-die-on-error  Don't exit when too many HTTP errors are generated
 --start-at         Start at this file ID, instead of file ID '1'

 Example usage:

 # Debug, start at request ID 1242, make only 5 requests
 idgames_db_dump --debug --start-at 1242 --debug-requests 5

MOREHELP

our @options = (
    # script options
    q(debug|d),
    q(verbose|v),
    q(version),
    q(help|h),
    q(colorize|c), # always colorize output

    # other options
    q(json|j),
    q(xml|x),
    q(database|db|b=s),

    # misc options
    q(random-wait!),
    q(random-wait-time=i),
    q(debug-noexit),
    q(debug-requests=i),
    q(die-on-error!),
    q(save-textfile),
    q(start-at=i),
    q(morehelp),
);

=head1 DESCRIPTION

B<idgames_db_dump> - Build a mapping of filenames to file ID's from the
files stored in C<idGames Archive>.

=cut

################
# package main #
################
package main;

# pragmas
use 5.010;
# https://metacpan.org/pod/strictures
use strictures 1;
use utf8;

# system packages
use Carp;
use Config::Std;
use File::Basename;
use HTTP::Status;
use Log::Log4perl qw(get_logger :no_extra_logdie_message);
use Log::Log4perl::Level;
use LWP::UserAgent;
use Pod::Usage;

# Data::Dumper gets it's own block, cause it has extra baggage
use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Terse = 1;

# local packages
use App::WADTools; # for $VERSION
use App::WADTools::Config;
use App::WADTools::Database;
use App::WADTools::File;
use App::WADTools::JSONParser;
use App::WADTools::XMLParser;
use App::WADTools::RuntimeStats;

# script constants
use constant {
    DELAY_TIME          => 5,
    DEBUG_REQUESTS      => 100,
    FILE_REQUEST_ERRORS => 2,
    MAX_REQUEST_ERRORS  => 10,
};

    # create a variable with the current name of the script
    my $my_name = basename($0);
    # provide a version string if dzil hasn't populated modules with $VERSION
    # scalars
    my $VERSION = $App::WADTools::VERSION || q(git-dev);

    # total number of API requests
    my $total_requests = 0;
    binmode(STDOUT, ":utf8");

    # create a logger object
    my $cfg = App::WADTools::Config->new(options => \@options);

    # dump and bail if we get called with --help
    if ( $cfg->defined(q(help)) ) { pod2usage(-exitstatus => 1); }

    if ( $cfg->defined(q(version)) ) {
        print STDERR qq($my_name: version '$VERSION'\n);
        print STDERR qq($my_name: $copyright\n);
        exit 0;
    }

    # show morehelp?
    if ( $cfg->defined(q(morehelp)) ) {
        print STDERR $morehelp;
        exit 1;
    }

    # Start setting up the Log::Log4perl object
    my $log4perl_conf = qq(log4perl.rootLogger = WARN, Screen\n);
    if ( $cfg->defined(q(verbose)) && $cfg->defined(q(debug)) ) {
        die(q(Script called with --debug and --verbose; choose one!));
    } elsif ( $cfg->defined(q(debug)) ) {
        $log4perl_conf = qq(log4perl.rootLogger = DEBUG, Screen\n);
    } elsif ( $cfg->defined(q(verbose)) ) {
        $log4perl_conf = qq(log4perl.rootLogger = INFO, Screen\n);
    }

    # Use color when outputting directly to a terminal, or when --colorize was
    # used
    if ( -t STDOUT || $cfg->get(q(colorize)) ) {
        $log4perl_conf .= q(log4perl.appender.Screen )
            . qq(= Log::Log4perl::Appender::ScreenColoredLevels\n);
    } else {
        $log4perl_conf .= q(log4perl.appender.Screen )
            . qq(= Log::Log4perl::Appender::Screen\n);
    }

    $log4perl_conf .= qq(log4perl.appender.Screen.stderr = 1\n)
        . qq(log4perl.appender.Screen.utf8 = 1\n)
        . qq(log4perl.appender.Screen.layout = PatternLayout\n)
        . q(log4perl.appender.Screen.layout.ConversionPattern )
        # %r: number of milliseconds elapsed since program start
        # %p{1}: first letter of event priority
        # %4L: line number where log statement was used, four numbers wide
        # %M{1}: Name of the method name where logging request was issued
        # %m: message
        # %n: newline
        . qq|= [%8r] %p{1} %4L (%M{1}) %m%n\n|;
        #. qq( = %d %p %m%n\n)
        #. qq(= %d{HH.mm.ss} %p -> %m%n\n);

    # create a logger object, and prime the logfile for this session
    Log::Log4perl::init( \$log4perl_conf );
    my $log = get_logger("");

    # check for the database file if --database was used
    if ( $cfg->defined(q(database)) ) {
        $log->logdie(qq(Can't find database file ) . $cfg->get(q(database)))
            unless ( -e $cfg->get(q(database)) );
    }

    # print a nice banner
    $log->info(qq(Starting $my_name, version '$VERSION'));
    $log->info(qq($copyright));
    $log->info(qq(My PID is: $$));

    my $debug_requests = DEBUG_REQUESTS;
    if ( $log->is_debug && $cfg->defined(q(debug-requests)) ) {
        $debug_requests = $cfg->get(q(debug-requests));
        $log->debug(qq(Setting number of API requests to $debug_requests));
    }

    # create the stats object and start the timer
    my $stats = App::WADTools::RuntimeStats->new();
    $stats->start_timer(q(program));

    # start at file ID 1, keep going until you get a "error" response instead
    # of a "content" response in the JSON
    # Note: file ID '0' is invalid
    my $file_id = 1;
    # unless '--start-at' is used, then start at that file ID
    if ( $cfg->defined(q(start-at)) ) {
        $file_id = $cfg->get(q(start-at));
        $log->debug(qq(Starting at file ID $file_id));
    }

    my $random_wait_delay = DELAY_TIME;
    if ( $cfg->defined(q(random-wait-time)) ) {
        $random_wait_delay = $cfg->get(q(random-wait-time));
        $log->debug(qq(Using $random_wait_delay for Ñ•eed for random delay));
    }
    my $db;
    if ( $cfg->defined(q(database)) && -e $cfg->get(q(database)) ) {
        $db = App::WADTools::Database->new(
            filename => $cfg->get(q(database))
        );
        if ( defined $db->connect ) {
            my $schema_entries = $db->has_schema;
            if ( $schema_entries == 0 ) {
                $log->error(q(DB schema empty, need to create database first));
                $log->logdie(q(Create database with 'db_bootstrap' script));
            } else {
                $log->debug(qq(DB schema has $schema_entries entries));
            }
        } else {
            $log->logdie(q(Unable to connect to database));
        }
    }
    my $ua = LWP::UserAgent->new(agent => qq($my_name $VERSION));

    ### URLs
    my $idgames_base_url = q(http://www.doomworld.com/idgames/api/api.php?);
    # generic 'get' URL
    my $idgames_get_url =  $idgames_base_url . q(action=get);
    # latest files
    my $latestfiles_url = $idgames_base_url . q(action=latestfiles&limit=1);

    # What kind of data are we requesting and parsing? JSON or XML?
    my ($parse_type, $parser);
    if ( $cfg->defined(q(json)) ) {
        $parse_type = q(json);
        # don't append 'out=json' to URL unless --json was used
        $idgames_get_url .= q(&out=json);
        $latestfiles_url .= q(&out=json);
        $parser = App::WADTools::JSONParser->new(
            save_textfile => $cfg->defined(q(save-textfile))
        );
        $log->debug(qq(Using JSON API calls to idGames Archive API));
    } else {
        $parse_type = q(xml);
        $parser = App::WADTools::XMLParser->new(
            save_textfile => $cfg->defined(q(save-textfile))
        );
        $log->debug(qq(Using XML API calls to idGames Archive API));
    }

    my $file_request_errors = 0;
    my $total_request_errors = 0;
    my $total_parse_errors = 0;
    my $successful_api_requests = 0;
    my $total_http_request_time = 0;
    my @unsuccessful_request_ids;
    my @unsuccessful_parse_ids;
    $log->debug(qq(Fetching 'latestfiles' via $latestfiles_url));
    my $latestfiles_req = HTTP::Request->new(GET => $latestfiles_url);
    my $last_idgames_file_id = 0;
    my $api_version = 0;
    my $resp = $ua->request($latestfiles_req);
    if ( $resp->is_success ) {
        my %parser_return = $parser->parse(data => $resp->content);
        my @latestfiles;
        if ( exists $parser_return{error} ) {
            my $error = $parser_return{error};
            $log->error(q(Error type: ) . $error->type);
            $log->error(q(Error message: ) . $error->message);
            $log->logdie(q(Error parsing 'latestfiles' from )
                . uc($parse_type) . q( request));
        } elsif ( exists $parser_return{files} ) {
            @latestfiles = @{$parser_return{files}};
            $api_version = $parser_return{api_version};
            $log->debug(qq(idGames API version from server is: $api_version));
            # the latest file is always first in the latestfiles array
            my $latestfile = $latestfiles[0];
            $log->debug(q(Last idGames Archive file ID is: ) . $latestfile->id);
            $last_idgames_file_id = $latestfile->id;
        }
    } else {
        # HTTP error
        $log->logdie(q(Received HTTP error from API server: )
            . $resp->status_line);
    }

    # Loop across all of the file IDs, until the last file ID is reached
    # $last_idgames_file_id was determined by parsing 'latestfiles' above
    HTTP_REQUEST: while ( $file_id <= $last_idgames_file_id ) {
        $log->info(qq(====== File ID: $file_id ======));
        my $random_wait = int(rand($random_wait_delay));
        my $fetch_url =  $idgames_get_url . qq(&id=$file_id);
        $log->debug(qq(URL: $fetch_url));
        # POST requests; https://metacpan.org/pod/LWP#An-Example for an example
        $stats->start_timer(q(http_request));
        my $req = HTTP::Request->new(GET => $fetch_url);
        $resp = $ua->request($req);
        $stats->stop_timer(q(http_request));
        my $http_request_time
            = $stats->time_value_difference(q(http_request));
        $log->debug(q(HTTP request took )
            . sprintf(q|%0.5f second(s)|, $http_request_time)
        );
        $total_http_request_time += $http_request_time;
        $total_requests++;
        # Handle HTTP status messages
        if ( $resp->is_success ) {
            $log->info(sprintf(q(ID: %5u), $file_id)
                . q(; HTTP status: ) . status_message($resp->code));
            #$log->debug($resp->content);
            my %parser_return = $parser->parse(data => $resp->content);
            # Check for parsing errors
            if ( exists $parser_return{error} ) {
                my $error = $parser_return{error};
                $log->error(qq(Error parsing API response for $file_id));
                $log->error(q(Error type: ) . $error->type);
                $log->error(q(Error message: ) . $error->message);
                $log->error(q(Error contents:) . Dumper($error->content_block));
                push(@unsuccessful_parse_ids, $file_id);
                # move to the next file ID
                $file_id++;
                $log->debug(qq(Sleeping for $random_wait seconds ...)
                    . q|(after parse error)|);
                sleep $random_wait;
                next HTTP_REQUEST;
            } else {
                $successful_api_requests++;
                my $file = $parser_return{file};
                my $full_path = $file->dir . $file->filename;
                $log->info(sprintf(q(ID: %5u), $file->id)
                    . qq|; Parse successful ($full_path)|);
                if ( defined $db ) {
                    my $add_status = $db->add_file(file_obj => $file);
                    if ( ref($add_status) eq q(App::WADTools::Error) ) {
                        $log->error(
                            q(Inserting file into database returned error));
                        $log->logdie(q(Insert error message: )
                            . $add_status->message);
                    }
                    $log->info(sprintf(q|ID: %5u|, $file->id)
                        . qq|; Added to DB ($full_path)|);
                }
            }
        } else {
            # HTTP error
            $log->error(q(Received HTTP error from API server: )
                . $resp->status_line);
            push(@unsuccessful_request_ids, $file_id);
        }
        $log->debug(qq(Finished parsing of ID $file_id));
        $file_id++;
        if ( $log->is_debug ) {
            if ( ! $cfg->defined(q(debug-noexit))
                && $total_requests >= $debug_requests ) {
                last HTTP_REQUEST;
            }
        }
        $log->debug(qq(Sleeping for $random_wait seconds...));
        sleep $random_wait;
    }

    # stop the timer, display stats
    $log->debug(q(Requests for these file IDs were unsuccessful;));
    $log->debug(join(q(, ), @unsuccessful_request_ids));
    $log->debug(q(Parsing of these file IDs was unsuccessful;));
    $log->debug(join(q(, ), @unsuccessful_parse_ids));
    $stats->stop_timer(q(program));
    $stats->successful_api_requests($successful_api_requests);
    $stats->unsuccessful_api_requests(scalar(@unsuccessful_request_ids));
    $stats->unsuccessful_api_parses(scalar(@unsuccessful_parse_ids));
    $stats->total_http_request_time($total_http_request_time);
    $stats->write_stats();


=head1 AUTHOR

Brian Manning, C<< <brian at xaoc dot org> >>

=head1 BUGS

Please report any bugs or feature requests to the GitHub issue tracker for
this project:

C<< <https://github.com/spicyjack/wadtools/issues> >>.

=head1 SUPPORT

You can find documentation for this script with the perldoc command.

    perldoc idgames_db_dump

=head1 COPYRIGHT & LICENSE

Copyright (c) 2013 Brian Manning, all rights reserved.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

# ÐºÐ¾Ð½ÐµÑ†!
# vim: set shiftwidth=4 tabstop=4
