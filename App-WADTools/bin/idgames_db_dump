#!/usr/bin/perl -w

# For support with this file, please file an issue on the GitHub issue tracker
# for this project: https://github.com/spicyjack/wadtools/issues

=head1 NAME

B<idgames_db_dump> - Build a mapping of filenames to file ID's from the
files stored in C<idGames Archive>.

=cut

our $copyright =
    q|Copyright (c)2013 Brian Manning/brian at xaoc dot org|;

=head1 SYNOPSIS

 perl idgames_db_dump [OPTIONS]

 Script options:
 -h|--help          Shows this help text
 -d|--debug         Debug script execution
 -v|--verbose       Verbose script execution

 Other script options:
 -b|--database      Write info retrieved via API to this SQLite file
 -x|--xml           Request XML data from idGames API (default)
 -j|--json          Request JSON data from idGames API
 -c|--colorize      Always colorize script output
 -m|--morehelp      Show misc/debugging options, then exit

 Example usage:

 # dump the idGames Archive API to a database file;
 # idgames_archive.db would have been created using 'db_bootstrap'
 idgames_db_dump --database /path/to/local/idgames_archive.db

 # debug with colorized debug messages
 idgames_db_dump --database /path/to/idgames_db_dump.db \
    --debug --colorize --overwrite

You can view the full C<POD> documentation of this file by calling C<perldoc
idgames_db_dump>.

=cut

our $morehelp = <<MOREHELP;

 === Misc/debugging script options ===
 --no-random-wait   Don't use random pauses between GET requests
 --random-wait-time Seed for random wait timer; default = 5, 0-5 seconds
 --debug-noexit     Don't exit script when --debug is used
 --debug-requests   Exit after this many requests when --debug is used
 --no-die-on-error  Don't exit when too many HTTP errors are generated
 --start-at         Start at this file ID, instead of file ID '1'

 Example usage:

 # Debug, start at request ID 1242, make only 5 requests
 idgames_db_dump --debug --start-at 1242 --debug-requests 5

MOREHELP

our @options = (
    # script options
    q(debug|d),
    q(verbose|v),
    q(help|h),
    q(colorize|c), # always colorize output

    # other options
    q(json|j),
    q(xml|x),
    q(overwrite|w),
    q(database|db|b=s),

    # misc options
    q(random-wait!),
    q(random-wait-time=i),
    q(debug-noexit),
    q(debug-requests=i),
    q(die-on-error!),
    q(start-at=i),
    q(morehelp),
);

=head1 DESCRIPTION

B<idgames_db_dump> - Build a mapping of filenames to file ID's from the
files stored in C<idGames Archive>.

=cut

################
# package main #
################
package main;

# pragmas
use 5.010;
# https://metacpan.org/pod/strictures
use strictures 1;
use utf8;

# system packages
use Carp;
use Config::Std;
use File::Basename;
use HTTP::Status;
use Log::Log4perl qw(get_logger :no_extra_logdie_message);
use Log::Log4perl::Level;
use LWP::UserAgent;
use Pod::Usage;

# Data::Dumper gets it's own block, cause it has extra baggage
use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Terse = 1;

# local packages
use App::WADTools; # for $VERSION
use App::WADTools::Config;
use App::WADTools::DBFile;
use App::WADTools::File;
use App::WADTools::JSONParser;
use App::WADTools::XMLParser;

# script constants
use constant {
    DELAY_TIME          => 5,
    DEBUG_REQUESTS      => 100,
    FILE_REQUEST_ERRORS => 2,
    MAX_REQUEST_ERRORS  => 10,
};

    # create a variable with the current name of the script
    my $my_name = basename($0);
    # provide a version string if dzil hasn't populated modules with $VERSION
    # scalars
    my $VERSION = $App::WADTools::VERSION || q(git-dev);

    # total number of API requests
    my $total_requests = 0;
    binmode(STDOUT, ":utf8");

    # create a logger object
    my $cfg = App::WADTools::Config->new(options => \@options);

    # dump and bail if we get called with --help
    if ( $cfg->defined(q(help)) ) { pod2usage(-exitstatus => 1); }

    # show morehelp?
    if ( $cfg->defined(q(morehelp)) ) {
        print STDERR $morehelp;
        exit 1;
    }

    # Start setting up the Log::Log4perl object
    my $log4perl_conf = qq(log4perl.rootLogger = WARN, Screen\n);
    if ( $cfg->defined(q(verbose)) && $cfg->defined(q(debug)) ) {
        die(q(Script called with --debug and --verbose; choose one!));
    } elsif ( $cfg->defined(q(debug)) ) {
        $log4perl_conf = qq(log4perl.rootLogger = DEBUG, Screen\n);
    } elsif ( $cfg->defined(q(verbose)) ) {
        $log4perl_conf = qq(log4perl.rootLogger = INFO, Screen\n);
    }

    # Use color when outputting directly to a terminal, or when --colorize was
    # used
    if ( -t STDOUT || $cfg->get(q(colorize)) ) {
        $log4perl_conf .= q(log4perl.appender.Screen )
            . qq(= Log::Log4perl::Appender::ScreenColoredLevels\n);
    } else {
        $log4perl_conf .= q(log4perl.appender.Screen )
            . qq(= Log::Log4perl::Appender::Screen\n);
    }

    $log4perl_conf .= qq(log4perl.appender.Screen.stderr = 1\n)
        . qq(log4perl.appender.Screen.utf8 = 1\n)
        . qq(log4perl.appender.Screen.layout = PatternLayout\n)
        . q(log4perl.appender.Screen.layout.ConversionPattern )
        # %r: number of milliseconds elapsed since program start
        # %p{1}: first letter of event priority
        # %4L: line number where log statement was used, four numbers wide
        # %M{1}: Name of the method name where logging request was issued
        # %m: message
        # %n: newline
        . qq|= [%8r] %p{1} %4L (%M{1}) %m%n\n|;
        #. qq( = %d %p %m%n\n)
        #. qq(= %d{HH.mm.ss} %p -> %m%n\n);

    # create a logger object, and prime the logfile for this session
    Log::Log4perl::init( \$log4perl_conf );
    my $log = get_logger("");

    # check for the database file if --database was used
    if ( $cfg->defined(q(database)) ) {
        $log->logdie(qq(Can't find database file ) . $cfg->get(q(database)))
            unless ( -e $cfg->get(q(database)) );
    }

    # print a nice banner
    $log->info(qq(Starting $my_name, version '$VERSION'));
    $log->info(qq($copyright));
    $log->info(qq(My PID is: $$));

    my $debug_requests = DEBUG_REQUESTS;
    if ( $log->is_debug && $cfg->defined(q(debug-requests)) ) {
        $debug_requests = $cfg->get(q(debug-requests));
        $log->debug(qq(Setting number of API requests to $debug_requests));
    }

    # start at file ID 1, keep going until you get a "error" response instead
    # of a "content" response in the JSON
    # Note: file ID '0' is invalid
    my $file_id = 1;
    # unless '--start-at' is used, then start at that file ID
    if ( $cfg->defined(q(start-at)) ) {
        $file_id = $cfg->get(q(start-at));
        $log->debug(qq(Starting at file ID $file_id));
    }

    my $random_wait_delay = DELAY_TIME;
    if ( $cfg->defined(q(random-wait-time)) ) {
        $random_wait_delay = $cfg->get(q(random-wait-time));
        $log->debug(qq(Using $random_wait_delay for Ñ•eed for random delay));
    }
    my %file_map;
    my $db;
    if ( $cfg->defined(q(database)) && -e $cfg->get(q(database)) ) {
        $db = App::WADTools::DBFile->new(
            filename => $cfg->get(q(database))
        );
        if ( defined $db->connect ) {
            my $schema_entries = $db->has_schema;
            if ( $schema_entries == 0 ) {
                $log->error(q(DB schema empty, need to create database first));
                $log->logdie(q(Create database with 'db_bootstrap' script));
            } else {
                $log->debug(qq(DB schema has $schema_entries entries));
            }
        } else {
            $log->logdie(q(Unable to connect to database));
        }
    }
    my $ua = LWP::UserAgent->new(agent => qq($my_name $VERSION));
    my $idgames_base_url = q(http://www.doomworld.com/idgames/api/api.php?);
    my $idgames_get_url =  $idgames_base_url . q(action=get&);
    # What kind of data are we requesting and parsing? JSON or XML?
    my ($parse_type, $parser);
    if ( $cfg->defined(q(json)) ) {
        $parse_type = q(json);
        # don't append 'out=json' to URL unless --json was used
        $idgames_get_url .= q(out=json&);
        $parser = App::WADTools::JSONParser->new();
        $log->debug(qq(Using JSON API calls to idGames Archive API));
    } else {
        $parse_type = q(xml);
        $parser = App::WADTools::XMLParser->new();
        $log->debug(qq(Using XML API calls to idGames Archive API));
    }

    my $file_request_errors = 0;
    my $total_request_errors = 0;
    my $sequential_request_errors = 0;
    # Query for the latestfiles, limit one, XML format
    my $latestfiles_url = $idgames_base_url . q(action=latestfiles&limit=1);
    my $latestfiles_req = HTTP::Request->new(GET => $latestfiles_url);
    my $last_idgames_file_id = 0;
    my $api_meta_version = 0;
    my $resp = $ua->request($latestfiles_req);
    if ( $resp->is_success ) {
        my $latestfile;
        ($latestfile, $api_meta_version)
            = $parser->parse(data => $resp->content);
        if ( ref($latestfile) eq q(App::WADTools::Error) ) {
            $log->error(q(Error parsing downloaded )
                . uc($parse_type) . q( data));
        } else {
            $last_idgames_file_id = $latestfile->id;
        }
    } else {
        # HTTP error
        $log->logdie(q(Received HTTP error from API server: )
            . $resp->status_line);
    }

    # Loop across all of the file IDs, until a request for a file ID returns
    # an error of some kind
    HTTP_REQUEST: while (1) {
        my $random_wait = int(rand($random_wait_delay));
        my $fetch_url =  $idgames_get_url . qq(id=$file_id);
        $log->debug(qq(Fetching: $fetch_url));
        # POST requests; https://metacpan.org/pod/LWP#An-Example for an example
        my $req = HTTP::Request->new(GET => $fetch_url);
        $resp = $ua->request($req);
        $total_requests++;
        # Handle HTTP status messages
        if ( $resp->is_success ) {
            $log->debug(qq(HTTP API request is successful for ID: $file_id));
            #$log->info($resp->content);
            #$log->info(qq(file ID: $file_id; ) . status_message($resp->code));
            my ($file, $api_meta_version)
                = $parser->parse(data => $resp->content);
            # Check for parsing errors
            $log->debug(qq(idGames API metaversion is: $api_meta_version));
            if ( ref($file) eq q(App::WADTools::Error) ) {
                $log->error(q(Error parsing downloaded )
                    . uc($parse_type) . q( data));
                $log->error(q(Error message: ) . $file->error_msg);
                $file_request_errors++;
                if ( $file_request_errors > FILE_REQUEST_ERRORS ) {
                    $log->error(qq(Too many errors parsing ID $file_id!));
                    $log->error(qq(Moving to the next file ID in sequence));
                    # reset the file request error flag
                    $file_request_errors = 0;
                    # move to the next file ID
                    $file_id++;
                    # increase the total number of request errors
                    $log->debug(q(Bumping up error counters));
                    $total_request_errors++;
                    $sequential_request_errors++;
                    if ( $sequential_request_errors > MAX_REQUEST_ERRORS ) {
                        $log->logdie(q|Received too many API errors (|
                            . MAX_REQUEST_ERRORS
                            . q|) in too short a period of time|);
                    }
                }
                $log->debug(qq(Sleeping for $random_wait seconds ...)
                    . q|(error response block)|);
                sleep $random_wait;
                next HTTP_REQUEST;
            } else {
                my $full_path = $file->dir . $file->filename;
                $log->info(status_message($resp->code)
                    . sprintf(q( ID: %5u; ), $file_id)
                    . qq(path: $full_path));
                $file_map{$file_id} = $full_path;
                if ( defined $db ) {
                    $db->add_file(file_obj => $file);
                }
                if ( $sequential_request_errors > 0 ) {
                    $log->debug(q(Decreasing sequential error counter...));
                    $sequential_request_errors--;
                }
            }
        } else {
            # HTTP error
            $log->logdie(q(Received HTTP error from API server: )
                . $resp->status_line);
        }
        $log->debug(qq(Finished parsing of ID $file_id));
        $file_id++;
        if ( $log->is_debug ) {
            if ( ! $cfg->defined(q(debug-noexit))
                && $total_requests > $debug_requests ) {
                last HTTP_REQUEST;
            }
        }
        $log->debug(qq(Sleeping for $random_wait seconds...));
        sleep $random_wait;
    }

=head1 AUTHOR

Brian Manning, C<< <brian at xaoc dot org> >>

=head1 BUGS

Please report any bugs or feature requests to the GitHub issue tracker for
this project:

C<< <https://github.com/spicyjack/wadtools/issues> >>.

=head1 SUPPORT

You can find documentation for this script with the perldoc command.

    perldoc idgames_db_dump

=head1 COPYRIGHT & LICENSE

Copyright (c) 2013 Brian Manning, all rights reserved.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

# ÐºÐ¾Ð½ÐµÑ†!
# vim: set shiftwidth=4 tabstop=4
