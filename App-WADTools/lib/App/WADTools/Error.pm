################################
# package App::WADTools::Error #
################################
package App::WADTools::Error;

=head1 App::WADTools::Error

Object used to return success/error status to other objects for a given method
call.

=cut

use Moo;

=head2 Attributes

=over

=item caller

The caller that created this L<Error> object.  You can use the C<__FILE__>,
C<__PACKAGE__> and C<__LINE__> "special literals" from L<perldata> to quickly
get the information about the caller;

  my $error = App::WADTools::Error->new(
    caller => __PACKAGE__ . q(.) . __LINE__
  );

=cut

has q(caller) => (
    is      => q(rw),
    default => sub { 1 },
);


=item is_error

A read-only boolean flag that's set to C<1>.  Meant to be used to test to see
if an L<Error> object was returned to the caller via:

    my $obj = $foo->do_something();
    if ( $obj->can(q(is_error)) ) {
        # Error object returned
    }

=cut

has q(is_error) => (
    is      => q(ro),
    default => sub { 1 },
);

=item message

The error message generated by a method call.  Can be set/reset after the
object is created by:

 $obj->message(q(This is a fine new error message!));

=cut

has q(message) => (
    is  => q(rw),
);

=item raw_error

The raw content of the error message, as received by the caller or created by
the object that created the L<Erorr> object.

=cut

has q(raw_error) => (
    is => q(rw),
);

=item type

A text string that indicates what "type" of error this is.  The attribute
types are determined by the objects that create this L<Error> object, there is
no set "master" list of attributes.

A general naming convention is
C<E<lt>objectE<gt>.E<lt>method or actionE<gt>.E<lt>action_in_methodE<gt>>.

=cut

has q(type) => (
    is  => q(rw),
);

=back

=head2 Methods

=over

=item BUILD() (aka 'new')

Creates the L<App::WADTools::Error> object, pass with C<error_msg> and
C<raw_error> in order to populate those attributes, or populate those
attributes once the C<Error> object has been created.

=cut

1;
