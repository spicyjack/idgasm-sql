################################
# package App::WADTools::Error #
################################
package App::WADTools::Error;

=head1 NAME

App::WADTools::Error

=head1 SYNOPSIS

 # in an object method somewhere, an error occurs...
 my $error = App::WADTools::Error->new(
    level   => q(error),
    id      => q(object.method_name.error_type),
    message => qq(Something bad happened! error:) . $obj->parsed_error,
    raw     => $obj->raw_unparsed_error,
 );

 # return this error object to the caller
 return $error

 # in the calling method/function
 my $new_object = $object->do_something_that_fails();
 # "->can()" method is from UNIVERSAL
 if ( $new_object->can(q(is_error)) ) {
    # $new_object is an error, handle the error
 } else {
    # $new_object is not an error object, continue processing
 }

=head1 DESCRIPTION

A generic "error" object, that is used to return error status and messages to
other objects when a method call generates an error of some sort.

=cut

### System modules
use Moo;

=head2 Attributes

=over

=item is_error

A read-only boolean flag that's set to C<1>.  Meant to be used to test to see
if an L<Error> object was returned during a method call;

    my $obj = $foo->do_something();
    if ( $obj->can(q(is_error)) ) {
        # An Error object was returned
    }

=cut

has q(is_error) => (
    is      => q(ro),
    default => sub { 1 },
);

=item level

The log level of the L<Error>.  Using different log levels lets the user
filter out log messages while the program is running.  The log levels can be
one of the following case-insensitive strings:

=over

=item FATAL

=item ERROR

=item WARN

=item INFO

=item DEBUG

=item TRACE

=back

The default level of any L<Error> object is B<WARN>.

=cut

has q(level) => (
    is      => q(rw),
    isa     => sub { $_[0] =~ /fatal|error|warn|info|debug|trace/i },
    default => sub { q(warn) },
);

=item id

A text string that identifies the error.  Defaults to an empty string.

A general naming convention for the C<id> attribute is:

C<E<lt>objectE<gt>.E<lt>method_or_actionE<gt>.E<lt>action_in_methodE<gt>>

=cut

has q(id) => (
    is      => q(rw),
    default => sub { q() },
);

=item message

The error message generated by a method call.  Defaults to an empty string.
Can be set/reset after the object is created by:

 $obj->message(q(This is a fine new error message!));

=cut

has q(message) => (
    is      => q(rw),
    default => sub { q() },
);

=item raw

The raw content of the error message, as received by the caller or created by
the object that created the L<Erorr> object.  Defaults to an empty string.

=cut

has q(raw) => (
    is      => q(rw),
    default => sub { q() },
);

=back

=head2 Methods

=over

=item BUILD() (aka 'new')

Creates the L<App::WADTools::Error> object, pass with C<error_msg> and
C<raw> in order to populate those attributes, or populate those
attributes once the C<Error> object has been created.

=item log_error

Causes the L<App::WADTools::Error> object to log itself using the
L<Log::Log4perl> object created by the L<App::WADTools::Logger> object.  This
means that the error will be logged either to the console, or to a log file,
depending on what options the user passes in to the script from the command
line.  Always returns C<1> for C<true>, unless there's some kind of error
writing to the L<Log::Log4perl>  object.

=cut

sub log_error {
    my $self = shift;
    my $log = Log::Log4perl->get_logger(""); # "" = root logger

    foreach my $attrib ( qw(level id message raw) ) {
        # all of the attributes by default are empty strings; if the attribute
        # is longer than zero bytes, log it
        if ( length($self->$attrib) > 0 ) {
            $log->error($attrib . q(: ) . $self->$attrib);
        }
    }
    return 1;
}

=back

=head1 AUTHOR

Brian Manning, C<< <brian at xaoc dot org> >>

=head1 BUGS

Please report any bugs or feature requests to the GitHub issue tracker for
this project:

C<< <https://github.com/spicyjack/wadtools/issues> >>.

=head1 SUPPORT

You can find documentation for this script with the perldoc command.

    perldoc App::WADTools::Error

=head1 COPYRIGHT & LICENSE

Copyright (c) 2013-2014 Brian Manning, all rights reserved.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

1;
